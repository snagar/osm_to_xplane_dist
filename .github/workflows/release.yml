# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-lin:

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U pyinstaller
        python -m pip install -U requests

        sudo apt install zip
        
        # Consider using urllib3 library instead of requests.
        # pip install flake8 pytest
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Pack using PyInstaller
      run: |
        ## Create the destination folder
        mkdir -p dist/osm_to_xplane/

        which pyinstaller
        
        echo -e "> Calling PyInstaller Wrapper"
        ./proj_build.sh
        
        # echo -e "> Calling PyInstaller"
        # pyinstaller --clean --noconfirm osm_to_xplane.py

        # Check dist folder and list all files in it
        find dist

        echo -e "\n\n> Change directory to build folder:\n\n"
        cd dist
        zip -6 "osm_to_xplane.lin.zip" "osm_to_xplane"

        ls -l 

        mkdir -p ${{ github.workspace }}/release
        cp -p ${{ github.workspace }}/dist/osm_to_xplane.lin.zip ${{ github.workspace }}/release

    - name: Upload Linux Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-lin-${{ matrix.build_type }}
        path: |          
          ${{ github.workspace }}/release/*


    - name: Post build folder test
      run: |
        ## List
        ls -l
        ls -l release
        
        

    
            
  build:
    runs-on: ubuntu-22.04
    # if: ( 1 == 2 )
    needs: [ build-lin ]
    # needs: [ pre-build, build-win, build-osx, build-lin ]
    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set build reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/release" >> "$GITHUB_OUTPUT"
          echo "utility-name=osm_to_xplane" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./download

      - name: Prepare release folder
        shell: bash
        run: |
          echo -e "Display download folder content"
          ls -ltR ./download
          
          echo -e "\n\nCreate the build folder\n"
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}
          echo -e "\n\nDisplay build folders before copy task:\n\n"
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          echo "copy folders"
          cp -rdp ./download/*.zip ${{ steps.strings.outputs.build-output-dir }}
          
          echo -e "\n\nDisplay files after folders were coppied:\n\n"
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          rm -rf ./download

